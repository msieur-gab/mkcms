name: Generate Content Index

on:
  push:
    branches:
      - main
    paths:
      - 'content/**/*.md'
      - 'content/**.md'
      - '!content/index.json'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup Node Project and Install Dependencies
      run: |
        echo '{
          "name": "content-indexer",
          "version": "1.0.0",
          "private": true,
          "type": "commonjs",
          "dependencies": {
            "gray-matter": "^4.0.3"
          }
        }' > package.json
        npm install

    - name: Generate Index
      run: |
        node -e "
        const fs = require('fs').promises;
        const path = require('path');
        const matter = require('gray-matter');

        async function generateIndex() {
          try {
            const contentDir = 'content';
            
            // Ensure content directory exists
            try {
              await fs.access(contentDir);
            } catch {
              await fs.mkdir(contentDir, { recursive: true });
            }
            
            // Get list of .md files
            const files = await fs.readdir(contentDir);
            const mdFiles = files.filter(file => file.endsWith('.md'));
            
            console.log('Found markdown files:', mdFiles);

            const contentIndex = await Promise.all(
              mdFiles.map(async (file) => {
                try {
                  const filePath = path.join(contentDir, file);
                  const content = await fs.readFile(filePath, 'utf-8');
                  const { data, content: markdownContent } = matter(content);
                  
                  // Extract the first non-empty paragraph after frontmatter for description
                  const contentWithoutFrontmatter = markdownContent.trim();
                  const paragraphs = contentWithoutFrontmatter.split(/\\n\\n+/);
                  let description = paragraphs.find(p => {
                    const trimmed = p.trim();
                    // Skip headers, code blocks, or empty lines
                    return trimmed && 
                           !trimmed.startsWith('#') && 
                           !trimmed.startsWith('```') &&
                           !trimmed.startsWith('---');
                  }) || '';

                  // Clean up the description
                  description = description
                    .replace(/\\[.*?\\]/g, '')  // Remove markdown links
                    .replace(/\\(.*?\\)/g, '')  // Remove URLs
                    .replace(/[#*`]/g, '')      // Remove markdown syntax
                    .replace(/\\n/g, ' ')       // Replace newlines with spaces
                    .trim();

                  // Limit description length
                  if (description.length > 200) {
                    description = description.substring(0, 200) + '...';
                  }

                  return {
                    title: data.title || path.basename(file, '.md'),
                    file: file,
                    description: description,
                    date: data.date ? new Date(data.date).toISOString() : new Date().toISOString(),
                    tags: data.tags || [],
                    published: data.published === true
                  };
                } catch (error) {
                  console.error(\`Error processing file \${file}:\`, error);
                  return null;
                }
              })
            );

            // Remove null entries and sort by date
            const validContent = contentIndex
              .filter(entry => entry !== null)
              .sort((a, b) => new Date(b.date) - new Date(a.date));

            await fs.writeFile(
              path.join(contentDir, 'index.json'),
              JSON.stringify(validContent, null, 2)
            );

            console.log(\`Generated index with \${validContent.length} entries\`);
            console.log('Sample entry:', JSON.stringify(validContent[0], null, 2));
          } catch (error) {
            console.error('Error:', error);
            process.exit(1);
          }
        }

        generateIndex();
        "

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Build site directory
      run: |
        mkdir -p _site/content
        cp content/index.json _site/content/
        
        # Copy markdown files if they exist
        for file in content/*.md; do
          if [ -f "$file" ]; then
            cp "$file" _site/content/
          fi
        done

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v3

    - name: Commit and push changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add content/index.json
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update content index" && git push)
